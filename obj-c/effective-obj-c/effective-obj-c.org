#+title: Effective Obj-c 学习笔记
#+author: YaoXiaohui

* Obj-c的语言特性
** oc特点
  + oc是c的超集
  + 区别于其他高级语言，oc使用动态绑定的消息结构，所有的对象类型检查都在运行时确定。O-c拥有运行时环境（runtime）的概念，由其了判断类型。
    而其他的高级语言，一般由编译器决定，如C++中的多态，在编译期间便通过虚函数表计算出了方法偏移. 怎么做有什么好处?[1]
** 头文件
  + 尽量少引入头文件，尽量不要在头文件中引入头文件
** 作用域
  + 尽量少用宏
  + 如果不想让其他类知道的产量，用 static const修饰，如 static const NSTimeInterval kInterval = 0.25f;
  + 如果要暴露常量，可以在头文件中定义并用extern修饰，在实现文件中赋值 如 extern NSTimeInterval kInterval;(头文件) NSTimeInterval kInterval = 0.25;（实现文件）
** 枚举
  + 除了NS_ENUM还有NS_OPTIONS
  + 在处理枚举的switch语句中，尽量不要加default，这样如果状态罗列不全时，编译器可以报警

* 一些语法糖
  + NSNumber *float = @1.0f;
  + NSString *obj1 = arr[0 ];
  + NSString *obj = dict[@"keyq"];
  + NSMutableArray *mArr = [@[@1,@2,@3] mutableCopy];

* 对象、消息、运行期
** 属性
*** 关键字
  + @property 语法实际是生成了一个属性(编译器会生成下划线开头的实例变量)的getter和setter方法,如： @property BOOL on;
  + @synthesize语法可以重新指定编译器生成的实例变量的名字，如：@synthesize on = _on;
  + @dynamic语法会阻止编译器自动创建实例变量和存取方法，假定这些方法在运行期能够找到

*** 性质修饰符
  + atomic/nonatomic 原子性，默认是atomic，实际上设置了atomic还是不能保证线程安全,而且atomic的性能很差
  + readwrite readonly 读写权限控制
  + 内存管理语义
    - assign 只针对int float等纯量类型简单赋值操作
    - strong 表明拥有关系，为其设置新值时步骤为：保留新值->释放旧值->设置新值 （会释放旧值）
    - weak 表明为拥有关系，为其设置新值时直接赋值。原对象销毁时该值也会清空 （不会释放旧值）
    - copy 不保留新值，而是copy一份，常用于NSString，或者赋值方是可变对象，防止其发生变化
    - unsafe_unretained assign语义的对象版本，类似weak，区别是当目标对象销毁时，属性值不清空（所以unsafe，容易泄露）
*** 存取方法
  + 获取方法，例： @property (nonatomic, getter=isOn) BOOL on;
  + 设置方法，例： @property (nonatomic, setter=setOn) BOOL on; setter方法不太常用
** 属性的读取
  简单说一句话，在类外访问，一律用属性；在类内访问，设置用属性，读取如果没有延迟初始化直接访问（下划线实例变量），如果有用属性[2]
  + 在init和dealloc中，统统通过实例变量来访问属性，除非访问不到该实例变量[3]
** 对象的等同性
  + 若想检查自定义对象等同性，需提供isEqual方法和hash方法
  + NSString和容器有自己的等同性方法，可变容器的等同性方法可能会出错（存储方式可能不同）
** 关联对象（相当于在运行时给对象添加属性）
  + Obj-c里面，可以利用runtime机制，在运行时给对象“添加”一些属性
  + 需要引入头文件 <objc/runtime.h>
  + 相关的方法
    - objc_setAssociatedObject(objSrc,key,newProperty,type)
    - objc_getAssociatedObject(objSrc,key)
  + 因为block实际上也是obj-c对象，所以可以给已有的obj赋新的block属性，有时候有奇效
  + 这种做法是非常手段，不要频繁使用，容易引入问题
** 关于objc_msgSend机制
  + 给对象发消息，实际就相当于call对象的相应方法。消息由接收者、选择子及参数构成
  + 发送给某对象的消息由“动态消息派发系统”处理，该系统负责根据选择子查找方法函数，并执行其代码
  + 因为有cache的存在，所以不是每次都要查的
** 理解消息转发机制
  + 若对象无法响应某个选择子，就进入对象转发流程
  + 通过运行时的动态方法解析功能，可以在需要用到某个方法时，再将其加入类中
    - 详细看effective objective-c第47页 动态方法解析的代码示例
  + 对象可以把其无法解析的选择子转交给其他对象来处理
  + 上述两步之后还是没办法处理选择子，就启动完整的消息转发机制

** 类的方法可以调换
   + 获取Method 对象，用 class_getInstanceMethod(class,sel)
   + 交换Method method_exchangeImplementations(method1,method2)
   + 明显，这个东西不能滥用，可以用来尝试调试程序
** 类对象的一些总结
   + 类型为id的对象，编译器假定他能响应所以消息
   + 编译器无法确定某类型对象到底能解读多少种选择子，因为可以动态插入
   + 每个实例都有一个指向Class对象的指针，表明其类型。Class对象每个类唯一
   + 当无法确定某个对象的类型时，应该要类型查询方法动态确定，而且尽量要用类型查询方法，而不用== isEqual等
     - isKindOfClass: 考虑继承
     - isMemberOfClass: 不考虑继承

* 接口与API设计
** 名字空间
*** 自定义的类，一定要加上自己的前缀，以免冲突。另外，Apple说两个字母的组合他包了，我们还是用两个字母以上的吧
*** 代码中定义的C函数，也总是应该加上前缀，即使是在实现文件中，C函数也是“顶级符号”的存在！
*** 如果你引入第三方代码，最好也为其加上前缀
** 初始化
*** 一般，最好在类中指明一个全能初始化方法，其他的初始化方法都call其实现
*** 如果全能初始化方法和超类方法不同，一定要复写超类的全能初始化方法，否则可能造成call超类全能初始化方法出core
*** 如果逻辑上难以复写超类的全能初始化方法，则应该复写其，并抛出异常
** 调试与description
*** 复写description方法，可以在代码中用NSLog打印其信息
*** 复写debugDescription，可以在调试器中po其信息
*** 在description中最好输出对象名称和地址，如 return [NSString StringWithFormat:@"<%@:%p, %@,%@>",[self class],self,field1,field2]
** 使用不可变对象
*** 在头文件中，多用readonly属性，只生成getter方法，不生成setter方法
*** 应当知道，即使设置为readonly，也有一些办法设置其值，比如KVC技术或者查找内存偏移量
*** 不要把可变的collection作为属性公开，应该提供相关的方法，以此修改对象中的可变collection
** 方法命名
*** 如果方法的返回值是新创建的，那么方法名的首个词应该是返回值的类型，除非前面还有修饰语，如localizedString这种。getter方法不在此列
*** 应该把表示参数类型的名词放在参数前面
*** 如果方法要在当前对象上执行操作，那么就应该包含动词。若执行操作时还需要参数，则应该在动词后面加上一个或多个名词
*** 尽量不要使用简称，使用全称把少年
*** bool属性灵活使用is和has前缀
*** 不要瞎用get了
*** 类的私有方法最好要加上前缀，但是不要用下划线，因为apple说他已经包圆了
** Copy方法
*** 下列关系总是成立
    + [NSMutableArray copy] => NSArray
    + [NSArray mutableCopy] => NSMutableArray

*** 如果想让自己的类有拷贝功能，需要实现NSCopying协议
*** 如果自定义的对象有可变和不可变版本，除了实现NSCopying，还要实现NSMutableCopying
*** 复制对象时决定采用深拷贝还是浅拷贝，一般采用浅拷贝。如果你写的对象需要深拷贝，一般可以考虑单加一个深拷贝方法，来让使用者去知晓并选择。

* 注释
[1] 在编译时确定对象结构，会导致类重构时需要重新编译。这样很难做到对老库的兼容
[2] 直接读取实例变量速度快，不需要触发键值观察以及运行时的方法派发步骤；但是问题就是不能保证[[性质修饰符][性质修饰符]]所定义的语义。
[3] 因为getter和setter可能在子类中重载，在init和dealloc中如果用属性可能会导致调用子类的重载方法，导致报错。但如果实例变量在基类中定义而且子类不可见，则只能访问其属性方法了。

[fn:funtion]
